import numpy as np
import pandas as pd
import re
from itertools import islice
from collections.abc import Iterable


def main():
    def rotation(axis, angle, vector):
        # Rodrigues_rotation_formula,
        angle = np.radians(angle)
        axis = np.array(axis) / np.linalg.norm(axis)
        vector = np.array(vector) / np.linalg.norm(vector)
        V_rot = np.cos(angle) * vector + (1-np.cos(angle)) * \
            np.dot(axis, vector) * axis + \
            np.sin(angle) * np.cross(axis, vector)
        return(V_rot)

    def atom_xyz():
        q1 = np.subtract(atom2, atom1)
        q2 = np.subtract(atom3, atom2)
        u1 = rotation(np.cross(q1, q2), angle, q1)
        u2 = rotation(q1, -dihedral, u1) * distance + np.array(atom1)
        return(u2)
    # atom atom1 distance atom2 angle atom3 dihedral 0

    with open(path, 'r') as zma:
        Z_martrix = []
        found = False
        for n, line in enumerate(zma.readlines()):
            if line.lstrip()[0:2] == 'B1':
                found = True
                break
            elif line.isspace():
                continue
            else:
                line = line.split()
                if n >= 3:
                    if line[-1] == '0':
                        line.pop()
                    Z_martrix.append(line)
                else:
                    Z_martrix.append(line)
        N_atom = len(Z_martrix)
    if found:
        with open(path, 'r') as zma:
            dict_value = {}
            regex = re.compile(r'[:;=\s+]+')
            for index, line in enumerate(islice(zma, n, None)):
                line = regex.split(line.strip())  # delete '=' '\s+'
                dict_value[line[0]] = float(line[1])
    else:
        pass

    dict_xyz = []
    for i in range(1, N_atom+1):
        if i == 1:
            xyz = [0.000000, 0.000000, 0.000000]
            elem = Z_martrix[i-1][0]
            xyz.insert(0, elem)
            dict_xyz.append(xyz)
        elif i == 2:
            distance = Z_martrix[i-1][2]
            if found:
                distance = dict_value[Z_martrix[i-1][2]]
            else:
                distance = float(distance)
            xyz = [0.00000, 0.000000, distance]
            elem = Z_martrix[i-1][0]
            xyz.insert(0, elem)
            dict_xyz.append(xyz)
        elif i == 3:
            elem = Z_martrix[i-1][0]
            atom1, atom2 = Z_martrix[i-1][1::2]
            distance, angle = Z_martrix[i-1][2::2]
            atom1 = dict_xyz[int(atom1)-1][1:]
            atom2 = dict_xyz[int(atom2)-1][1:]
            if found:
                distance = dict_value[distance]
                angle = dict_value[angle]
            else:
                distance = float(distance)
                angle = float(angle)
            xyz = list(np.array(atom1)
                       - rotation([0, 1, 0], -angle, np.subtract(atom1, atom2))*distance)
            xyz.insert(0, elem)
            dict_xyz.append(xyz)
        else:
            elem = Z_martrix[i-1][0]
            atom1, atom2, atom3 = Z_martrix[i-1][1::2]
            distance, angle, dihedral = Z_martrix[i-1][2::2]
            atom1 = dict_xyz[int(atom1)-1][1:]
            atom2 = dict_xyz[int(atom2)-1][1:]
            atom3 = dict_xyz[int(atom3)-1][1:]
            if found:
                distance = dict_value[distance]
                angle = dict_value[angle]
                dihedral = dict_value[dihedral]
            else:
                distance = float(distance)
                angle = float(angle)
                dihedral = float(dihedral)
            xyz = list(atom_xyz())
            xyz.insert(0, elem)
            dict_xyz.append(xyz)

    matrix_xyz = pd.DataFrame(
        dict_xyz, columns=['elem', 'x', 'y', 'z'], index=np.arange(1, N_atom+1))
    matrix_xyz.index.name = 'label'
    print(matrix_xyz)
    matrix_xyz.to_csv(savepath, sep="\t", index=False,
                      header=False, float_format='%14.8f')


if __name__ == "__main__":
    path = 'zmatrix.txt'
    savepath = 'test'
    main()
